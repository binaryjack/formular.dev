/**
 * FORMULAR - Configuration Presets Usage Examples
 * Copyright (c) 2025 Piana Tadeo
 * Licensed under MIT License
 *
 * Examples showing how to use all configuration presets following the ValidationConfigPresets pattern
 */

import { IServiceManager } from '@core/managers/service-manager/service-manager.types'
import { ValidationConstraintBuilder } from '@core/managers/validation-manager/constraint-builder/validation-constraint-builder'
import { GenericValidationBuilder } from '@core/managers/validation-manager/generic-validation-builder/generic-validation-builder'
import { ValidationLocalizeKeys } from '@core/managers/validation-manager/validation-schema/validation.localize.keys'
import {
    createConfigurationPresetFactory as createFactory,
    IConfigurationPresets
} from './configuration-presets-factory'

/**
 * Factory function for all configuration presets - Main Entry Point
 * This follows the exact same pattern as createValidationPresetFactory
 */
export const createAllConfigurationPresets = (
    serviceManager: IServiceManager
): IConfigurationPresets => {
    return createFactory(serviceManager)
}

/**
 * Enhanced phone validator factory using configuration presets
 * Follows the same pattern as validation presets but includes input and notification configuration
 */
export const createPhoneValidatorWithAllConfig = (serviceManager: IServiceManager) => {
    const configPresets = createAllConfigurationPresets(serviceManager)

    return {
        us: (fieldName: string) => {
            const inputConfig = configPresets.input.profiles.standardProfile()
            const notificationConfig = configPresets.notification.profiles.infoProfile()            return (
                new ValidationConstraintBuilder<RegExp>('pattern')
                    .setConstraint(configPresets.validation.phone.us as RegExp)
                    .setName(fieldName)
                    .setErrorMessage(ValidationLocalizeKeys.phoneError)
                    .setGuideMessage('Format: (555) 123-4567')
                    // Additional configuration from presets
                    .setValidationTrigger(inputConfig.trigger)
                    .setDebounceMs(inputConfig.debounce)
            )
        },

        ch: (fieldName: string) => {
            const inputConfig = configPresets.input.profiles.standardProfile()

            return new ValidationConstraintBuilder<RegExp>('pattern')
                .setConstraint(configPresets.validation.phone.ch)
                .setName(fieldName)
                .setErrorMessage(ValidationLocalizeKeys.phoneError)
                .setGuideMessage('Format: +41 XX XXX XX XX')
        },

        forCountry: (fieldName: string, countryCode: string) => {
            const pattern = configPresets.validation.phone.forCountry(countryCode)

            return new ValidationConstraintBuilder<RegExp>('pattern')
                .setConstraint(pattern)
                .setName(fieldName)
                .setErrorMessage(`Please enter a valid ${countryCode} phone number`)
        },

        getSupportedCountries: () => [
            'US',
            'CH',
            'UK',
            'DE',
            'FR',
            'IT',
            'ES',
            'AT',
            'NL',
            'BE',
            'LU'
        ],

        // Get the actual configuration profiles being used
        getInputProfile: () => configPresets.input.profiles.standardProfile(),
        getNotificationProfile: () => configPresets.notification.profiles.infoProfile()
    }
}

/**
 * Enhanced email validator factory with complete configuration
 */
export const createEmailValidatorWithAllConfig = (serviceManager: IServiceManager) => {
    const configPresets = createAllConfigurationPresets(serviceManager)

    return {
        standard: (fieldName: string) => {
            const inputConfig = configPresets.input.profiles.standardProfile()

            return new ValidationConstraintBuilder<RegExp>('pattern')
                .setConstraint(configPresets.validation.email)
                .setName(fieldName)
                .setErrorMessage(ValidationLocalizeKeys.emailError)
                .setGuideMessage('Enter a valid email address')
        },

        realtime: (fieldName: string) => {
            const inputConfig = configPresets.input.profiles.realTimeProfile()

            return new ValidationConstraintBuilder<RegExp>('pattern')
                .setConstraint(configPresets.validation.email)
                .setName(fieldName)
                .setErrorMessage(ValidationLocalizeKeys.emailError)
                .setGuideMessage('Enter a valid email address')
                .setValidationTrigger(inputConfig.trigger) // 'onChange'
                .setDebounceMs(inputConfig.debounce) // 150ms
        },

        accessible: (fieldName: string) => {
            const inputConfig = configPresets.input.profiles.accessibilityProfile()

            return new ValidationConstraintBuilder<RegExp>('pattern')
                .setConstraint(configPresets.validation.email)
                .setName(fieldName)
                .setErrorMessage(ValidationLocalizeKeys.emailError)
                .setGuideMessage('Enter a valid email address')
                .setValidationTrigger(inputConfig.trigger)
                .setAutoFocus(inputConfig.autoFocus)
        }
    }
}

/**
 * Form configuration factory using environment-specific profiles
 */
export const createFormConfigurationWithEnvironment = (serviceManager: IServiceManager) => {
    const configPresets = createAllConfigurationPresets(serviceManager)

    return {
        development: () => {
            const profile = configPresets.profiles.developmentProfile()
            return {
                validation: {
                    trigger: profile.input.trigger,
                    debounce: profile.input.debounce,
                    errorDisplay: profile.input.errorDisplay
                },
                notifications: {
                    duration: profile.notification.duration,
                    position: profile.notification.position,
                    sound: profile.notification.sound
                },
                debugging: {
                    logLevel: profile.service.logLevel,
                    validation: profile.service.developmentValidation,
                    metrics: profile.service.performanceMetrics
                }
            }
        },

        production: () => {
            const profile = configPresets.profiles.productionProfile()
            return {
                validation: {
                    trigger: profile.input.trigger,
                    debounce: profile.input.debounce,
                    errorDisplay: profile.input.errorDisplay
                },
                notifications: {
                    duration: profile.notification.duration,
                    position: profile.notification.position,
                    sound: profile.notification.sound
                },
                debugging: {
                    logLevel: profile.service.logLevel,
                    validation: profile.service.developmentValidation,
                    metrics: profile.service.performanceMetrics
                }
            }
        },

        accessibility: () => {
            const profile = configPresets.profiles.accessibilityProfile()
            return {
                validation: {
                    trigger: profile.input.trigger,
                    debounce: profile.input.debounce,
                    errorDisplay: profile.input.errorDisplay,
                    autoFocus: profile.input.autoFocus,
                    accessibility: profile.input.accessibility
                },
                notifications: {
                    duration: profile.notification.duration, // 0 = persistent
                    position: profile.notification.position, // center
                    maxConcurrent: profile.notification.maxConcurrent, // 1
                    sound: profile.notification.sound, // true
                    animation: profile.notification.animation // false
                },
                debugging: {
                    logLevel: profile.service.logLevel, // debug
                    validation: profile.service.developmentValidation,
                    metrics: profile.service.performanceMetrics
                }
            }
        },

        autoDetect: () => {
            const profile = configPresets.utils.autoDetectProfile()
            return profile
        },

        // Status and validation helpers
        validateConfiguration: () => configPresets.utils.validateServices(),
        getStatusReport: () => configPresets.utils.getStatusReport()
    }
}

/**
 * Notification manager factory with preset configurations
 */
export const createNotificationManagerWithPresets = (serviceManager: IServiceManager) => {
    const configPresets = createAllConfigurationPresets(serviceManager)

    return {
        success: () => {
            const profile = configPresets.notification.profiles.successProfile()
            return {
                show: (message: string) => ({
                    message,
                    type: 'success',
                    duration: profile.duration,
                    position: profile.position,
                    sound: profile.sound,
                    animation: profile.animation
                }),
                config: profile
            }
        },

        error: () => {
            const profile = configPresets.notification.profiles.errorProfile()
            return {
                show: (message: string) => ({
                    message,
                    type: 'error',
                    duration: profile.duration,
                    position: profile.position,
                    sound: profile.sound,
                    animation: profile.animation
                }),
                config: profile
            }
        },

        warning: () => {
            const profile = configPresets.notification.profiles.warningProfile()
            return {
                show: (message: string) => ({
                    message,
                    type: 'warning',
                    duration: profile.duration,
                    position: profile.position,
                    sound: profile.sound,
                    animation: profile.animation
                }),
                config: profile
            }
        },

        info: () => {
            const profile = configPresets.notification.profiles.infoProfile()
            return {
                show: (message: string) => ({
                    message,
                    type: 'info',
                    duration: profile.duration,
                    position: profile.position,
                    sound: profile.sound,
                    animation: profile.animation
                }),
                config: profile
            }
        },

        accessible: () => {
            const profile = configPresets.notification.profiles.accessibilityProfile()
            return {
                show: (message: string) => ({
                    message,
                    type: 'info',
                    duration: profile.duration, // 0 = requires manual dismiss
                    position: profile.position, // center
                    sound: profile.sound, // true for accessibility
                    animation: profile.animation // false for accessibility
                }),
                config: profile
            }
        }
    }
}

/**
 * Complete form builder using all configuration presets
 * This demonstrates the full power of the unified configuration system
 */
export const createCompleteFormBuilder = (serviceManager: IServiceManager) => {
    const configPresets = createAllConfigurationPresets(serviceManager)

    return {        createField: (options: {
            name: string
            type: 'phone' | 'email' | 'password' | 'text'
            country?: string
            profile?: 'standard' | 'realTime' | 'accessible' | 'relaxed'
        }) => {
            const profile = options.profile ?? 'standard'
            
            // Get input configuration based on profile
            let inputConfig
            switch (profile) {
                case 'realTime':
                    inputConfig = configPresets.input.profiles.realTimeProfile()
                    break
                case 'accessible':
                    inputConfig = configPresets.input.profiles.accessibilityProfile()
                    break
                case 'relaxed':
                    inputConfig = configPresets.input.profiles.relaxedProfile()
                    break
                default:
                    inputConfig = configPresets.input.profiles.standardProfile()
                    break
            }            let validationConstraint: any

            switch (options.type) {
                case 'phone': {
                    const countryCode = options.country ?? 'US'
                    validationConstraint = new ValidationConstraintBuilder<RegExp>('pattern')
                        .setConstraint(configPresets.validation.phone.forCountry(countryCode) as RegExp)
                        .setName(options.name)
                        .setErrorMessage(`Please enter a valid ${countryCode} phone number`)
                    break
                }
                case 'email':
                    validationConstraint = new ValidationConstraintBuilder<RegExp>('pattern')
                        .setConstraint(configPresets.validation.email as RegExp)
                        .setName(options.name)
                        .setErrorMessage(ValidationLocalizeKeys.emailError)
                    break

                case 'password':
                    validationConstraint = new ValidationConstraintBuilder<RegExp>('pattern')
                        .setConstraint(configPresets.validation.passwordStrong as RegExp)
                        .setName(options.name)
                        .setErrorMessage('Password must be strong')
                    break

                default:
                    validationConstraint = new ValidationConstraintBuilder<RegExp>('pattern')
                        .setConstraint(/.*/) // Accept anything for text fields
                        .setName(options.name)
                        .setErrorMessage('Please enter a valid value')
                    break
            }

            // Apply input configuration
            if (validationConstraint) {
                validationConstraint
                    .setValidationTrigger(inputConfig.trigger)
                    .setDebounceMs(inputConfig.debounce)
            }

            return {
                validation: validationConstraint,
                inputConfig: inputConfig,
                build: () => validationConstraint.build()
            }
        },

        createForm: (
            fields: Array<ReturnType<ReturnType<typeof createCompleteFormBuilder>['createField']>>
        ) => {
            const builder = new GenericValidationBuilder()

            fields.forEach((field) => {
                builder.addConstraint(field.validation.build())
            })

            return {
                validation: builder,
                fields: fields,
                build: () => builder.build()
            }
        },

        // Get environment-specific configuration
        getEnvironmentConfig: () => {
            return configPresets.utils.autoDetectProfile()
        },

        // Validate all services are available
        validateSetup: () => {
            const status = configPresets.utils.getStatusReport()
            if (!status.allAvailable) {
                throw new Error(`Configuration services not available: ${JSON.stringify(status)}`)
            }
            return true
        }
    }
}
